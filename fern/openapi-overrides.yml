paths:
  /v1/listen:
    post:
      x-fern-sdk-group-name:
        - speechToText
      x-fern-sdk-method-name: listen
      x-fern-examples: 
        - name: Local File
          code-samples:
            - language: curl
              code: >
                curl \
                  --request POST \
                  --header 'Authorization: Token YOUR_DEEPGRAM_API_KEY' \
                  --header 'Content-Type: audio/wav' \
                  --data-binary @youraudio.wav \
                  --url 'https://api.deepgram.com/v1/listen'
            - language: python
              code: >
                import requests

                # Define the URL for the Deepgram API endpoint
                url = "https://api.deepgram.com/v1/listen"

                # Define the headers for the HTTP request
                headers = {
                     "Authorization": "Token DEEPGRAM_API_KEY",
                     "Content-Type": "audio/*"
                }

                # Get the audio file
                with open("/path/to/youraudio.wav", "rb") as audio_file:
                  # Make the HTTP request
                  response = requests.post(url, headers=headers, data=audio_file)

                print(response.json())
            - language: typescript
              code: >
                import fs from "fs";
                import fetch from "node-fetch";

                const url = "https://api.deepgram.com/v1/listen";
                const apiKey = "DEEPGRAM_API_KEY"; // Replace with your actual API key
                const audioFilePath = "/path/to/youraudio.wav"; // Replace with the path to your audio file

                // Read the audio file as binary data
                fs.readFile(audioFilePath, (err, audioData) => {
                  if (err) {
                    console.error("Error reading audio file:", err);
                    return;
                  }

                  // Define request headers
                  const headers = {
                    Accept: "application/json",
                    Authorization: `Token ${apiKey}`,
                    "Content-Type": "audio/wav",
                  };

                  // Make the POST request using node-fetch
                  fetch(url, {
                    method: "POST",
                    headers: headers,
                    body: audioData,
                  })
                    .then((response) => {
                      if (!response.ok) {
                        throw new Error("Failed to make request:", response.statusText);
                      }
                      return response.json();
                    })
                    .then((data) => {
                      console.dir(data, { depth: null }); // Handle response data
                    })
                    .catch((error) => {
                      console.error("Error:", error); // Handle errors
                    });
                });
          request: 
            url: https://example.com/audio.mp3
          response: 
            body:
              metadata:
                request_id: a847f427-4ad5-4d67-9b95-db801e58251c
                sha256: 154e291ecfa8be6ab8343560bcc109008fa7853eb5372533e8efdefc9b504c33
                created: '2024-05-12T18:57:13Z'
                duration: 25.933313
                channels: 1
                models:
                - 30089e05-99d1-4376-b32e-c263170674af
                model_info:
                  30089e05-99d1-4376-b32e-c263170674af:
                    name: 2-general-nova
                    version: 2024-01-09.29447
                    arch: nova-2
                summary_info:
                  model_uuid: 67875a7f-c9c4-48a0-aa55-5bdb8a91c34a
                  input_tokens: 95
                  output_tokens: 63
                sentiment_info:
                  model_uuid: 80ab3179-d113-4254-bd6b-4a2f96498695
                  input_tokens: 105
                  output_tokens: 105
                topics_info:
                  model_uuid: 80ab3179-d113-4254-bd6b-4a2f96498695
                  input_tokens: 105
                  output_tokens: 7
                intents_info:
                  model_uuid: 80ab3179-d113-4254-bd6b-4a2f96498695
                  input_tokens: 105
                  output_tokens: 4
                tags:
                - test
                transaction_key: transaction_key
              results:
                channels:
                - {}
                utterances:
                - {}
                summary:
                  result: success
                  short: Speaker 0 discusses the significance of the first all-female spacewalk
                    with an all-female team, stating that it is a tribute to the skilled and qualified
                    women who were denied opportunities in the past.
                sentiments:
                  segments:
                  - text: Yeah. As as much as, um, it's worth celebrating, uh, the first, uh, spacewalk,
                      um, with an all-female team, I think many of us are looking forward to it
                      just being normal. And, um, I think if it signifies anything, it is, uh, to
                      honor the the women who came before us who, um, were skilled and qualified,
                      um, and didn't get the the same opportunities that we have today.
                    start_word: 0
                    end_word: 69
                    sentiment: positive
                    sentiment_score: 0.5810546875
                  average:
                    sentiment: positive
                    sentiment_score: 0.5810185185185185
        - name: Remote File
          code-samples:
            - language: curl
              code: |
                curl --request POST \
                  --url https://api.deepgram.com/v1/listen \
                  --header 'Accept: application/json' \
                  --header 'Authorization: Token YOUR_API_KEY' \
                  --header 'Content-Type: application/json' \
                  --data '{"url": "https://dpgr.am/spacewalk.wav"}'
            - language: python
              code: |
                import requests

                # Define the URL for the Deepgram API endpoint
                url = "https://api.deepgram.com/v1/listen"

                # Define the headers for the HTTP request
                headers = {
                    "Accept": "application/json",
                    "Authorization": "Token DEEPGRAM_API_KEY",
                    "Content-Type": "application/json"
                }
                # Define the data for the HTTP request
                data = {"url": "https://dpgr.am/spacewalk.wav"}

                # Make the HTTP request
                response = requests.post(url, headers=headers, json=data)

                print(response.json())
            - language: typescript
              code: |
                const url = "https://api.deepgram.com/v1/listen";
                const apiKey = "DEEPGRAM_API_KEY"; // Replace with your actual API key
                const audioUrl = "https://dpgr.am/spacewalk.wav";

                // Define the request data object
                const data = {
                  url: audioUrl,
                };

                // Define the request headers object
                const headers = {
                  Accept: "application/json",
                  Authorization: `Token ${apiKey}`,
                  "Content-Type": "application/json",
                };

                // Make the POST request using fetch API
                fetch(url, {
                  method: "POST",
                  headers: headers, // Pass the headers object
                  body: JSON.stringify(data), // Convert data object to JSON string
                })
                  .then((response) => response.json()) // Parse the JSON response
                  .then((data) => {
                    console.dir(data.results, { depth: null }); // Log response data
                  })
                  .catch((error) => {
                    console.error("Error:", error); // Handle errors
                  });
          request: 
            url: https://example.com/audio.wav
          response: 
            body:
              metadata:
                request_id: a847f427-4ad5-4d67-9b95-db801e58251c
                sha256: 154e291ecfa8be6ab8343560bcc109008fa7853eb5372533e8efdefc9b504c33
                created: '2024-05-12T18:57:13Z'
                duration: 25.933313
                channels: 1
                models:
                - 30089e05-99d1-4376-b32e-c263170674af
                model_info:
                  30089e05-99d1-4376-b32e-c263170674af:
                    name: 2-general-nova
                    version: 2024-01-09.29447
                    arch: nova-2
                summary_info:
                  model_uuid: 67875a7f-c9c4-48a0-aa55-5bdb8a91c34a
                  input_tokens: 95
                  output_tokens: 63
                sentiment_info:
                  model_uuid: 80ab3179-d113-4254-bd6b-4a2f96498695
                  input_tokens: 105
                  output_tokens: 105
                topics_info:
                  model_uuid: 80ab3179-d113-4254-bd6b-4a2f96498695
                  input_tokens: 105
                  output_tokens: 7
                intents_info:
                  model_uuid: 80ab3179-d113-4254-bd6b-4a2f96498695
                  input_tokens: 105
                  output_tokens: 4
                tags:
                - test
                transaction_key: transaction_key
              results:
                channels:
                - {}
                utterances:
                - {}
                summary:
                  result: success
                  short: Speaker 0 discusses the significance of the first all-female spacewalk
                    with an all-female team, stating that it is a tribute to the skilled and qualified
                    women who were denied opportunities in the past.
                sentiments:
                  segments:
                  - text: Yeah. As as much as, um, it's worth celebrating, uh, the first, uh, spacewalk,
                      um, with an all-female team, I think many of us are looking forward to it
                      just being normal. And, um, I think if it signifies anything, it is, uh, to
                      honor the the women who came before us who, um, were skilled and qualified,
                      um, and didn't get the the same opportunities that we have today.
                    start_word: 0
                    end_word: 69
                    sentiment: positive
                    sentiment_score: 0.5810546875
                  average:
                    sentiment: positive
                    sentiment_score: 0.5810185185185185
  /v1/read:
    post:
      x-fern-sdk-group-name:
        - textIntelligence
      x-fern-sdk-method-name: TextRead
  /v1/speak:
    post:
      x-fern-sdk-group-name:
        - textToSpeech
      x-fern-sdk-method-name: speak
  /v1/projects:
    get:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: listProjects
  /v1/projects/{project_id}:
    get:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: getProject
    delete:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: deleteProject
    patch:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: updateProject
  /v1/projects/{project_id}/balances:
    get:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: getProjectBalances
  /v1/projects/{project_id}/balances/{balance_id}:
    get:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: getProjectBalance
  /v1/projects/{project_id}/models:
    get:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: listProjectModels
  /v1/projects/{project_id}/models/{model_id}:
    get:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: getProjectModel
  /v1/projects/{project_id}/keys:
    get:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: listProjectKeys
    post:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: createProjectKey
  /v1/projects/{project_id}/keys/{key_id}:
    get:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: getProjectKey
    delete:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: deleteProjectKey
  /v1/projects/{project_id}/members:
    get:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: listProjectMembers
  /v1/projects/{project_id}/members/{member_id}:
    delete:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: deleteProjectMember
  /v1/projects/{project_id}/members/{member_id}/scopes:
    get:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: listProjectMemberScopes
    put:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: updateProjectMemberScopes
  /v1/projects/{project_id}/invites:
    get:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: listProjectInvites
    post:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: createProjectInvite
  /v1/projects/{project_id}/invites/{email}:
    delete:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: deleteProjectInvite
  /v1/projects/{project_id}/leave:
    delete:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: deleteProjectLeave
  /v1/projects/{project_id}/requests:
    get:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: listProjectRequests
  /v1/projects/{project_id}/requests/{request_id}:
    get:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: getProjectRequest
  /v1/projects/{project_id}/usage:
    get:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: getProjectUsage
  /v1/projects/{project_id}/usage/fields:
    get:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: listProjectUsageFields
  /v1/projects/{project_id}/usage/breakdown:
    get:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: getProjectUsageBreakdown
  /v1/projects/{project_id}/purchases:
    get:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: listProjectPurchases
  /v1/models:
    get:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: listModels
  /v1/models/{model_id}:
    get:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: getModel
  /v1/projects/{project_id}/self-hosted/distribution/credentials:
    get:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: listSelfHostedDistCreds
    post:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: createSelfHostedDistCreds
  /v1/projects/{project_id}/self-hosted/distribution/credentials/{distribution_credentials_id}:
    get:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: getSelfHostedCredentials
    delete:
      x-fern-sdk-group-name:
        - managementApi
      x-fern-sdk-method-name: deleteSelfHostedDistCreds
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      x-fern-header: 
        prefix: Token
  schemas:
    speak_request: 
      type: object
      properties:
        text:
          type: string
          description: The text to speak